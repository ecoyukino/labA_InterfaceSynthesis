-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity array_io is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_o_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_0_full_n : IN STD_LOGIC;
    d_o_0_write : OUT STD_LOGIC;
    d_o_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_1_full_n : IN STD_LOGIC;
    d_o_1_write : OUT STD_LOGIC;
    d_i_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    d_i_ce0 : OUT STD_LOGIC;
    d_i_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    d_i_ce1 : OUT STD_LOGIC;
    d_i_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of array_io is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "array_io_array_io,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.581000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1306,HLS_SYN_LUT=2081,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal acc_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_o_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal d_o_1_blk_n : STD_LOGIC;
    signal d_i_load_reg_1051 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal d_i_load_1_reg_1057 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_fu_425_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_reg_1076 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_1_fu_439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_1_reg_1084 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_2_reg_1089 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_3_reg_1095 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_2_fu_453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_2_reg_1114 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_3_fu_467_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_3_reg_1122 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_4_reg_1127 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_5_reg_1133 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_4_fu_481_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_4_reg_1152 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_5_fu_495_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_5_reg_1160 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_6_reg_1165 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_7_reg_1171 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_6_fu_509_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_6_reg_1190 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_7_fu_523_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_7_reg_1198 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_8_reg_1203 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_9_reg_1209 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_8_fu_529_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_8_reg_1225 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_9_fu_534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_9_reg_1230 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_10_reg_1235 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_11_reg_1241 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_10_fu_539_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_10_reg_1257 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_11_fu_544_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_11_reg_1262 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_12_reg_1267 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_13_reg_1273 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_12_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_12_reg_1289 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_13_fu_554_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_13_reg_1294 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_14_reg_1299 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_15_reg_1305 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_14_fu_559_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_14_reg_1321 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_15_fu_564_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_15_reg_1326 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_16_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_17_reg_1337 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_16_fu_569_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_16_reg_1353 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_17_fu_574_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_17_reg_1358 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_18_reg_1363 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_19_reg_1369 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_18_fu_579_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_18_reg_1385 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_19_fu_584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_19_reg_1390 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_20_reg_1395 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_21_reg_1401 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_20_fu_589_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_20_reg_1417 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_21_fu_594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_21_reg_1422 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_22_reg_1427 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_load_23_reg_1433 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_22_fu_605_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_22_reg_1449 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_23_fu_610_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_23_reg_1454 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_1_fu_619_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_1_reg_1459 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_24_fu_625_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_24_reg_1464 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_5_fu_634_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_5_reg_1469 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_25_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_25_reg_1474 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_9_fu_727_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_9_reg_1489 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_26_fu_733_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_26_reg_1494 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_13_fu_742_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_13_reg_1499 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_27_fu_748_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_27_reg_1504 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_17_fu_835_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_17_reg_1519 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_28_fu_841_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_28_reg_1524 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_21_fu_850_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_21_reg_1529 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_29_fu_856_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_29_reg_1534 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_25_fu_943_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_25_reg_1549 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_30_fu_949_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_30_reg_1554 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_29_fu_958_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_29_reg_1559 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_31_fu_964_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_31_reg_1564 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state15 : BOOLEAN;
    signal temp_1_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_fu_789_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state16 : BOOLEAN;
    signal temp_3_fu_819_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_4_fu_897_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state17 : BOOLEAN;
    signal temp_5_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_6_fu_999_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state18 : BOOLEAN;
    signal temp_7_fu_1029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state6 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_state9 : BOOLEAN;
    signal ap_block_state10 : BOOLEAN;
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_state12 : BOOLEAN;
    signal ap_block_state13 : BOOLEAN;
    signal ap_block_state14 : BOOLEAN;
    signal trunc_ln67_fu_421_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_1_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_2_fu_449_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_3_fu_463_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_4_fu_477_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_5_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_6_fu_505_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_7_fu_519_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_8_fu_615_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_8_fu_599_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_8_fu_615_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_24_fu_625_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_11_fu_630_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_9_fu_602_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_11_fu_630_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_25_fu_640_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_fu_645_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_9_fu_668_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_fu_651_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_2_fu_671_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_10_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_1_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_12_fu_698_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_1_fu_654_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_6_fu_701_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_13_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_4_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_14_fu_723_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_10_fu_657_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_14_fu_723_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_26_fu_733_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_17_fu_738_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_11_fu_660_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_17_fu_738_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_27_fu_748_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_2_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_15_fu_776_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_2_fu_759_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_10_fu_779_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_16_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_8_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_3_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_18_fu_806_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_3_fu_762_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_14_fu_809_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_19_fu_815_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_12_fu_801_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_20_fu_831_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_12_fu_765_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_20_fu_831_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_28_fu_841_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_23_fu_846_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_13_fu_768_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_23_fu_846_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_29_fu_856_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_4_fu_861_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_21_fu_884_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_4_fu_867_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_18_fu_887_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_22_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_16_fu_879_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_5_fu_864_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_24_fu_914_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_5_fu_870_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_22_fu_917_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_25_fu_923_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_20_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_26_fu_939_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_14_fu_873_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_26_fu_939_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_30_fu_949_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_29_fu_954_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_15_fu_876_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_29_fu_954_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_31_fu_964_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_6_fu_969_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_27_fu_986_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_6_fu_975_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_26_fu_989_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_28_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_24_fu_981_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_7_fu_972_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_30_fu_1016_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_7_fu_978_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_30_fu_1019_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_31_fu_1025_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_28_fu_1011_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                acc_0 <= temp_fu_681_p2;
                acc_1 <= temp_1_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                acc_2 <= temp_2_fu_789_p2;
                acc_3 <= temp_3_fu_819_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                acc_4 <= temp_4_fu_897_p2;
                acc_5 <= temp_5_fu_927_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                acc_6 <= temp_6_fu_999_p2;
                acc_7 <= temp_7_fu_1029_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln67_13_reg_1499 <= add_ln67_13_fu_742_p2;
                add_ln67_9_reg_1489 <= add_ln67_9_fu_727_p2;
                add_ln69_26_reg_1494 <= add_ln69_26_fu_733_p2;
                add_ln69_27_reg_1504 <= add_ln69_27_fu_748_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln67_17_reg_1519 <= add_ln67_17_fu_835_p2;
                add_ln67_21_reg_1529 <= add_ln67_21_fu_850_p2;
                add_ln69_28_reg_1524 <= add_ln69_28_fu_841_p2;
                add_ln69_29_reg_1534 <= add_ln69_29_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln67_1_reg_1459 <= add_ln67_1_fu_619_p2;
                add_ln67_5_reg_1469 <= add_ln67_5_fu_634_p2;
                add_ln69_22_reg_1449 <= add_ln69_22_fu_605_p2;
                add_ln69_23_reg_1454 <= add_ln69_23_fu_610_p2;
                add_ln69_24_reg_1464 <= add_ln69_24_fu_625_p2;
                add_ln69_25_reg_1474 <= add_ln69_25_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln67_25_reg_1549 <= add_ln67_25_fu_943_p2;
                add_ln67_29_reg_1559 <= add_ln67_29_fu_958_p2;
                add_ln69_30_reg_1554 <= add_ln69_30_fu_949_p2;
                add_ln69_31_reg_1564 <= add_ln69_31_fu_964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln69_10_reg_1257 <= add_ln69_10_fu_539_p2;
                add_ln69_11_reg_1262 <= add_ln69_11_fu_544_p2;
                d_i_load_12_reg_1267 <= d_i_q1;
                d_i_load_13_reg_1273 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln69_12_reg_1289 <= add_ln69_12_fu_549_p2;
                add_ln69_13_reg_1294 <= add_ln69_13_fu_554_p2;
                d_i_load_14_reg_1299 <= d_i_q1;
                d_i_load_15_reg_1305 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln69_14_reg_1321 <= add_ln69_14_fu_559_p2;
                add_ln69_15_reg_1326 <= add_ln69_15_fu_564_p2;
                d_i_load_16_reg_1331 <= d_i_q1;
                d_i_load_17_reg_1337 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln69_16_reg_1353 <= add_ln69_16_fu_569_p2;
                add_ln69_17_reg_1358 <= add_ln69_17_fu_574_p2;
                d_i_load_18_reg_1363 <= d_i_q1;
                d_i_load_19_reg_1369 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln69_18_reg_1385 <= add_ln69_18_fu_579_p2;
                add_ln69_19_reg_1390 <= add_ln69_19_fu_584_p2;
                d_i_load_20_reg_1395 <= d_i_q1;
                d_i_load_21_reg_1401 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln69_1_reg_1084 <= add_ln69_1_fu_439_p2;
                add_ln69_reg_1076 <= add_ln69_fu_425_p2;
                d_i_load_2_reg_1089 <= d_i_q1;
                d_i_load_3_reg_1095 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln69_20_reg_1417 <= add_ln69_20_fu_589_p2;
                add_ln69_21_reg_1422 <= add_ln69_21_fu_594_p2;
                d_i_load_22_reg_1427 <= d_i_q1;
                d_i_load_23_reg_1433 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln69_2_reg_1114 <= add_ln69_2_fu_453_p2;
                add_ln69_3_reg_1122 <= add_ln69_3_fu_467_p2;
                d_i_load_4_reg_1127 <= d_i_q1;
                d_i_load_5_reg_1133 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln69_4_reg_1152 <= add_ln69_4_fu_481_p2;
                add_ln69_5_reg_1160 <= add_ln69_5_fu_495_p2;
                d_i_load_6_reg_1165 <= d_i_q1;
                d_i_load_7_reg_1171 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln69_6_reg_1190 <= add_ln69_6_fu_509_p2;
                add_ln69_7_reg_1198 <= add_ln69_7_fu_523_p2;
                d_i_load_8_reg_1203 <= d_i_q1;
                d_i_load_9_reg_1209 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln69_8_reg_1225 <= add_ln69_8_fu_529_p2;
                add_ln69_9_reg_1230 <= add_ln69_9_fu_534_p2;
                d_i_load_10_reg_1235 <= d_i_q1;
                d_i_load_11_reg_1241 <= d_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                d_i_load_1_reg_1057 <= d_i_q0;
                d_i_load_reg_1051 <= d_i_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln67_10_fu_779_p2 <= std_logic_vector(signed(sext_ln67_15_fu_776_p1) + signed(sext_ln69_2_fu_759_p1));
    add_ln67_12_fu_801_p2 <= std_logic_vector(unsigned(acc_3) + unsigned(sext_ln67_3_fu_756_p1));
    add_ln67_13_fu_742_p2 <= std_logic_vector(signed(sext_ln69_11_fu_660_p1) + signed(sext_ln67_17_fu_738_p1));
    add_ln67_14_fu_809_p2 <= std_logic_vector(signed(sext_ln67_18_fu_806_p1) + signed(sext_ln69_3_fu_762_p1));
    add_ln67_16_fu_879_p2 <= std_logic_vector(unsigned(acc_4) + unsigned(sext_ln67_4_fu_861_p1));
    add_ln67_17_fu_835_p2 <= std_logic_vector(signed(sext_ln69_12_fu_765_p1) + signed(sext_ln67_20_fu_831_p1));
    add_ln67_18_fu_887_p2 <= std_logic_vector(signed(sext_ln67_21_fu_884_p1) + signed(sext_ln69_4_fu_867_p1));
    add_ln67_1_fu_619_p2 <= std_logic_vector(signed(sext_ln69_8_fu_599_p1) + signed(sext_ln67_8_fu_615_p1));
    add_ln67_20_fu_909_p2 <= std_logic_vector(unsigned(acc_5) + unsigned(sext_ln67_5_fu_864_p1));
    add_ln67_21_fu_850_p2 <= std_logic_vector(signed(sext_ln69_13_fu_768_p1) + signed(sext_ln67_23_fu_846_p1));
    add_ln67_22_fu_917_p2 <= std_logic_vector(signed(sext_ln67_24_fu_914_p1) + signed(sext_ln69_5_fu_870_p1));
    add_ln67_24_fu_981_p2 <= std_logic_vector(unsigned(acc_6) + unsigned(sext_ln67_6_fu_969_p1));
    add_ln67_25_fu_943_p2 <= std_logic_vector(signed(sext_ln69_14_fu_873_p1) + signed(sext_ln67_26_fu_939_p1));
    add_ln67_26_fu_989_p2 <= std_logic_vector(signed(sext_ln67_27_fu_986_p1) + signed(sext_ln69_6_fu_975_p1));
    add_ln67_28_fu_1011_p2 <= std_logic_vector(unsigned(acc_7) + unsigned(sext_ln67_7_fu_972_p1));
    add_ln67_29_fu_958_p2 <= std_logic_vector(signed(sext_ln69_15_fu_876_p1) + signed(sext_ln67_29_fu_954_p1));
    add_ln67_2_fu_671_p2 <= std_logic_vector(signed(sext_ln67_9_fu_668_p1) + signed(sext_ln69_fu_651_p1));
    add_ln67_30_fu_1019_p2 <= std_logic_vector(signed(sext_ln67_30_fu_1016_p1) + signed(sext_ln69_7_fu_978_p1));
    add_ln67_4_fu_693_p2 <= std_logic_vector(unsigned(acc_1) + unsigned(sext_ln67_1_fu_648_p1));
    add_ln67_5_fu_634_p2 <= std_logic_vector(signed(sext_ln69_9_fu_602_p1) + signed(sext_ln67_11_fu_630_p1));
    add_ln67_6_fu_701_p2 <= std_logic_vector(signed(sext_ln67_12_fu_698_p1) + signed(sext_ln69_1_fu_654_p1));
    add_ln67_8_fu_771_p2 <= std_logic_vector(unsigned(acc_2) + unsigned(sext_ln67_2_fu_753_p1));
    add_ln67_9_fu_727_p2 <= std_logic_vector(signed(sext_ln69_10_fu_657_p1) + signed(sext_ln67_14_fu_723_p1));
    add_ln67_fu_663_p2 <= std_logic_vector(unsigned(acc_0) + unsigned(sext_ln67_fu_645_p1));
    add_ln69_10_fu_539_p2 <= std_logic_vector(signed(d_i_load_10_reg_1235) + signed(add_ln69_2_reg_1114));
    add_ln69_11_fu_544_p2 <= std_logic_vector(signed(d_i_load_11_reg_1241) + signed(add_ln69_3_reg_1122));
    add_ln69_12_fu_549_p2 <= std_logic_vector(signed(d_i_load_12_reg_1267) + signed(add_ln69_4_reg_1152));
    add_ln69_13_fu_554_p2 <= std_logic_vector(signed(d_i_load_13_reg_1273) + signed(add_ln69_5_reg_1160));
    add_ln69_14_fu_559_p2 <= std_logic_vector(signed(d_i_load_14_reg_1299) + signed(add_ln69_6_reg_1190));
    add_ln69_15_fu_564_p2 <= std_logic_vector(signed(d_i_load_15_reg_1305) + signed(add_ln69_7_reg_1198));
    add_ln69_16_fu_569_p2 <= std_logic_vector(signed(d_i_load_16_reg_1331) + signed(add_ln69_8_reg_1225));
    add_ln69_17_fu_574_p2 <= std_logic_vector(signed(d_i_load_17_reg_1337) + signed(add_ln69_9_reg_1230));
    add_ln69_18_fu_579_p2 <= std_logic_vector(signed(d_i_load_18_reg_1363) + signed(add_ln69_10_reg_1257));
    add_ln69_19_fu_584_p2 <= std_logic_vector(signed(d_i_load_19_reg_1369) + signed(add_ln69_11_reg_1262));
    add_ln69_1_fu_439_p2 <= std_logic_vector(signed(d_i_load_1_reg_1057) + signed(trunc_ln67_1_fu_435_p1));
    add_ln69_20_fu_589_p2 <= std_logic_vector(signed(d_i_load_20_reg_1395) + signed(add_ln69_12_reg_1289));
    add_ln69_21_fu_594_p2 <= std_logic_vector(signed(d_i_load_21_reg_1401) + signed(add_ln69_13_reg_1294));
    add_ln69_22_fu_605_p2 <= std_logic_vector(signed(d_i_load_22_reg_1427) + signed(add_ln69_14_reg_1321));
    add_ln69_23_fu_610_p2 <= std_logic_vector(signed(d_i_load_23_reg_1433) + signed(add_ln69_15_reg_1326));
    add_ln69_24_fu_625_p0 <= d_i_q1;
    add_ln69_24_fu_625_p2 <= std_logic_vector(signed(add_ln69_24_fu_625_p0) + signed(add_ln69_16_reg_1353));
    add_ln69_25_fu_640_p0 <= d_i_q0;
    add_ln69_25_fu_640_p2 <= std_logic_vector(signed(add_ln69_25_fu_640_p0) + signed(add_ln69_17_reg_1358));
    add_ln69_26_fu_733_p0 <= d_i_q1;
    add_ln69_26_fu_733_p2 <= std_logic_vector(signed(add_ln69_26_fu_733_p0) + signed(add_ln69_18_reg_1385));
    add_ln69_27_fu_748_p0 <= d_i_q0;
    add_ln69_27_fu_748_p2 <= std_logic_vector(signed(add_ln69_27_fu_748_p0) + signed(add_ln69_19_reg_1390));
    add_ln69_28_fu_841_p0 <= d_i_q1;
    add_ln69_28_fu_841_p2 <= std_logic_vector(signed(add_ln69_28_fu_841_p0) + signed(add_ln69_20_reg_1417));
    add_ln69_29_fu_856_p0 <= d_i_q0;
    add_ln69_29_fu_856_p2 <= std_logic_vector(signed(add_ln69_29_fu_856_p0) + signed(add_ln69_21_reg_1422));
    add_ln69_2_fu_453_p2 <= std_logic_vector(signed(d_i_load_2_reg_1089) + signed(trunc_ln67_2_fu_449_p1));
    add_ln69_30_fu_949_p0 <= d_i_q1;
    add_ln69_30_fu_949_p2 <= std_logic_vector(signed(add_ln69_30_fu_949_p0) + signed(add_ln69_22_reg_1449));
    add_ln69_31_fu_964_p0 <= d_i_q0;
    add_ln69_31_fu_964_p2 <= std_logic_vector(signed(add_ln69_31_fu_964_p0) + signed(add_ln69_23_reg_1454));
    add_ln69_3_fu_467_p2 <= std_logic_vector(signed(d_i_load_3_reg_1095) + signed(trunc_ln67_3_fu_463_p1));
    add_ln69_4_fu_481_p2 <= std_logic_vector(signed(d_i_load_4_reg_1127) + signed(trunc_ln67_4_fu_477_p1));
    add_ln69_5_fu_495_p2 <= std_logic_vector(signed(d_i_load_5_reg_1133) + signed(trunc_ln67_5_fu_491_p1));
    add_ln69_6_fu_509_p2 <= std_logic_vector(signed(d_i_load_6_reg_1165) + signed(trunc_ln67_6_fu_505_p1));
    add_ln69_7_fu_523_p2 <= std_logic_vector(signed(d_i_load_7_reg_1171) + signed(trunc_ln67_7_fu_519_p1));
    add_ln69_8_fu_529_p2 <= std_logic_vector(signed(d_i_load_8_reg_1203) + signed(add_ln69_reg_1076));
    add_ln69_9_fu_534_p2 <= std_logic_vector(signed(d_i_load_9_reg_1209) + signed(add_ln69_1_reg_1084));
    add_ln69_fu_425_p2 <= std_logic_vector(signed(d_i_load_reg_1051) + signed(trunc_ln67_fu_421_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state10_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state10 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state11 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state12_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state12 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state13_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state13 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state14_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state14 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state15_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state15 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state16_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state16 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state17_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state17 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state18_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state18 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state3 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state4 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state5 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state6 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state7 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state8 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state9 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state18)
    begin
        if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state18)
    begin
        if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    d_i_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            d_i_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            d_i_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            d_i_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            d_i_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            d_i_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            d_i_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            d_i_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            d_i_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            d_i_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_i_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_i_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            d_i_address0 <= "XXXXX";
        end if; 
    end process;


    d_i_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            d_i_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            d_i_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            d_i_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            d_i_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            d_i_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            d_i_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            d_i_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            d_i_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            d_i_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_i_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_i_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            d_i_address1 <= "XXXXX";
        end if; 
    end process;


    d_i_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            d_i_ce0 <= ap_const_logic_1;
        else 
            d_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            d_i_ce1 <= ap_const_logic_1;
        else 
            d_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    d_o_0_blk_n_assign_proc : process(d_o_0_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            d_o_0_blk_n <= d_o_0_full_n;
        else 
            d_o_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_o_0_din_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, add_ln69_fu_425_p2, add_ln69_2_fu_453_p2, add_ln69_4_fu_481_p2, add_ln69_6_fu_509_p2, add_ln69_8_fu_529_p2, add_ln69_10_fu_539_p2, add_ln69_12_fu_549_p2, add_ln69_14_fu_559_p2, add_ln69_16_fu_569_p2, add_ln69_18_fu_579_p2, add_ln69_20_fu_589_p2, add_ln69_22_fu_605_p2, add_ln69_24_reg_1464, add_ln69_26_reg_1494, add_ln69_28_reg_1524, add_ln69_30_reg_1554)
    begin
        if (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0)))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                d_o_0_din <= add_ln69_30_reg_1554;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                d_o_0_din <= add_ln69_28_reg_1524;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                d_o_0_din <= add_ln69_26_reg_1494;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                d_o_0_din <= add_ln69_24_reg_1464;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                d_o_0_din <= add_ln69_22_fu_605_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                d_o_0_din <= add_ln69_20_fu_589_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                d_o_0_din <= add_ln69_18_fu_579_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_o_0_din <= add_ln69_16_fu_569_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                d_o_0_din <= add_ln69_14_fu_559_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                d_o_0_din <= add_ln69_12_fu_549_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                d_o_0_din <= add_ln69_10_fu_539_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                d_o_0_din <= add_ln69_8_fu_529_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                d_o_0_din <= add_ln69_6_fu_509_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_o_0_din <= add_ln69_4_fu_481_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                d_o_0_din <= add_ln69_2_fu_453_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                d_o_0_din <= add_ln69_fu_425_p2;
            else 
                d_o_0_din <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            d_o_0_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_o_0_write_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            d_o_0_write <= ap_const_logic_1;
        else 
            d_o_0_write <= ap_const_logic_0;
        end if; 
    end process;


    d_o_1_blk_n_assign_proc : process(d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            d_o_1_blk_n <= d_o_1_full_n;
        else 
            d_o_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_o_1_din_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, add_ln69_1_fu_439_p2, add_ln69_3_fu_467_p2, add_ln69_5_fu_495_p2, add_ln69_7_fu_523_p2, add_ln69_9_fu_534_p2, add_ln69_11_fu_544_p2, add_ln69_13_fu_554_p2, add_ln69_15_fu_564_p2, add_ln69_17_fu_574_p2, add_ln69_19_fu_584_p2, add_ln69_21_fu_594_p2, add_ln69_23_fu_610_p2, add_ln69_25_reg_1474, add_ln69_27_reg_1504, add_ln69_29_reg_1534, add_ln69_31_reg_1564)
    begin
        if (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0)))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                d_o_1_din <= add_ln69_31_reg_1564;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                d_o_1_din <= add_ln69_29_reg_1534;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                d_o_1_din <= add_ln69_27_reg_1504;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                d_o_1_din <= add_ln69_25_reg_1474;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                d_o_1_din <= add_ln69_23_fu_610_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                d_o_1_din <= add_ln69_21_fu_594_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                d_o_1_din <= add_ln69_19_fu_584_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_o_1_din <= add_ln69_17_fu_574_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                d_o_1_din <= add_ln69_15_fu_564_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                d_o_1_din <= add_ln69_13_fu_554_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                d_o_1_din <= add_ln69_11_fu_544_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                d_o_1_din <= add_ln69_9_fu_534_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                d_o_1_din <= add_ln69_7_fu_523_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_o_1_din <= add_ln69_5_fu_495_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                d_o_1_din <= add_ln69_3_fu_467_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                d_o_1_din <= add_ln69_1_fu_439_p2;
            else 
                d_o_1_din <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            d_o_1_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_o_1_write_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            d_o_1_write <= ap_const_logic_1;
        else 
            d_o_1_write <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln67_10_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_2_fu_671_p2),32));

    sext_ln67_11_fu_630_p0 <= d_i_q0;
        sext_ln67_11_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_11_fu_630_p0),17));

        sext_ln67_12_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_5_reg_1469),18));

        sext_ln67_13_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_6_fu_701_p2),32));

    sext_ln67_14_fu_723_p0 <= d_i_q1;
        sext_ln67_14_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_14_fu_723_p0),17));

        sext_ln67_15_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_9_reg_1489),18));

        sext_ln67_16_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_10_fu_779_p2),32));

    sext_ln67_17_fu_738_p0 <= d_i_q0;
        sext_ln67_17_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_17_fu_738_p0),17));

        sext_ln67_18_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_13_reg_1499),18));

        sext_ln67_19_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_14_fu_809_p2),32));

        sext_ln67_1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_1_reg_1057),32));

    sext_ln67_20_fu_831_p0 <= d_i_q1;
        sext_ln67_20_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_20_fu_831_p0),17));

        sext_ln67_21_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_17_reg_1519),18));

        sext_ln67_22_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_18_fu_887_p2),32));

    sext_ln67_23_fu_846_p0 <= d_i_q0;
        sext_ln67_23_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_23_fu_846_p0),17));

        sext_ln67_24_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_21_reg_1529),18));

        sext_ln67_25_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_22_fu_917_p2),32));

    sext_ln67_26_fu_939_p0 <= d_i_q1;
        sext_ln67_26_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_26_fu_939_p0),17));

        sext_ln67_27_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_25_reg_1549),18));

        sext_ln67_28_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_26_fu_989_p2),32));

    sext_ln67_29_fu_954_p0 <= d_i_q0;
        sext_ln67_29_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_29_fu_954_p0),17));

        sext_ln67_2_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_2_reg_1089),32));

        sext_ln67_30_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_29_reg_1559),18));

        sext_ln67_31_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_30_fu_1019_p2),32));

        sext_ln67_3_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_3_reg_1095),32));

        sext_ln67_4_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_4_reg_1127),32));

        sext_ln67_5_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_5_reg_1133),32));

        sext_ln67_6_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_6_reg_1165),32));

        sext_ln67_7_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_7_reg_1171),32));

    sext_ln67_8_fu_615_p0 <= d_i_q1;
        sext_ln67_8_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_8_fu_615_p0),17));

        sext_ln67_9_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_1_reg_1459),18));

        sext_ln67_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_reg_1051),32));

        sext_ln69_10_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_18_reg_1363),17));

        sext_ln69_11_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_19_reg_1369),17));

        sext_ln69_12_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_20_reg_1395),17));

        sext_ln69_13_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_21_reg_1401),17));

        sext_ln69_14_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_22_reg_1427),17));

        sext_ln69_15_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_23_reg_1433),17));

        sext_ln69_1_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_9_reg_1209),18));

        sext_ln69_2_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_10_reg_1235),18));

        sext_ln69_3_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_11_reg_1241),18));

        sext_ln69_4_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_12_reg_1267),18));

        sext_ln69_5_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_13_reg_1273),18));

        sext_ln69_6_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_14_reg_1299),18));

        sext_ln69_7_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_15_reg_1305),18));

        sext_ln69_8_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_16_reg_1331),17));

        sext_ln69_9_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_17_reg_1337),17));

        sext_ln69_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_load_8_reg_1203),18));

    temp_1_fu_711_p2 <= std_logic_vector(signed(sext_ln67_13_fu_707_p1) + signed(add_ln67_4_fu_693_p2));
    temp_2_fu_789_p2 <= std_logic_vector(signed(sext_ln67_16_fu_785_p1) + signed(add_ln67_8_fu_771_p2));
    temp_3_fu_819_p2 <= std_logic_vector(signed(sext_ln67_19_fu_815_p1) + signed(add_ln67_12_fu_801_p2));
    temp_4_fu_897_p2 <= std_logic_vector(signed(sext_ln67_22_fu_893_p1) + signed(add_ln67_16_fu_879_p2));
    temp_5_fu_927_p2 <= std_logic_vector(signed(sext_ln67_25_fu_923_p1) + signed(add_ln67_20_fu_909_p2));
    temp_6_fu_999_p2 <= std_logic_vector(signed(sext_ln67_28_fu_995_p1) + signed(add_ln67_24_fu_981_p2));
    temp_7_fu_1029_p2 <= std_logic_vector(signed(sext_ln67_31_fu_1025_p1) + signed(add_ln67_28_fu_1011_p2));
    temp_fu_681_p2 <= std_logic_vector(signed(sext_ln67_10_fu_677_p1) + signed(add_ln67_fu_663_p2));
    trunc_ln67_1_fu_435_p1 <= acc_1(16 - 1 downto 0);
    trunc_ln67_2_fu_449_p1 <= acc_2(16 - 1 downto 0);
    trunc_ln67_3_fu_463_p1 <= acc_3(16 - 1 downto 0);
    trunc_ln67_4_fu_477_p1 <= acc_4(16 - 1 downto 0);
    trunc_ln67_5_fu_491_p1 <= acc_5(16 - 1 downto 0);
    trunc_ln67_6_fu_505_p1 <= acc_6(16 - 1 downto 0);
    trunc_ln67_7_fu_519_p1 <= acc_7(16 - 1 downto 0);
    trunc_ln67_fu_421_p1 <= acc_0(16 - 1 downto 0);
end behav;
